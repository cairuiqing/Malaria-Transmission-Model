age_haps_m <- age_haps_m + 1
age_haps_m[age_haps_m == 1] <- 0
# Increment human haplotype ages
age_haps_p <- age_haps_p + 1
age_haps_p[age_haps_p == 1] <- 0
# Process mosquito deaths and update corresponding states
death_m <- get_mos_death3(age_m)
age_m[which(death_m == 1)] <- 0
inf_m[which(death_m == 1)] <- 0
moi_m[which(death_m == 1)] <- 0
infec_m[which(death_m == 1)] <- NA
age_haps_m[death_m == 1, ] <- 0
bit_last_3_days[death_m == 1] <- 0
# Process symptomatic infections (increment symptom age, clear if over threshold)
symp_age[which(symp_age != 0)] <- symp_age[which(symp_age != 0)] + 1
symp_age[symp_age > 14] <- 0
symp_index[old_pers_infec == 1] <- rbinom(length(old_pers_infec[old_pers_infec == 1]), 1, pr_symp_infec)
symp_index[old_pers_infec == 0] <- rbinom(length(old_pers_infec[old_pers_infec == 0]), 1, pr_symp_non_infec)
symp_age[which(symp_index == 1 & old_pers_infec == 1)] <- 1
# Clear human parasites by age of parasites
for(i in 1:sum(n_p)) {
if(sum(!is.na(infec_p[[i]])) > 0) {
for(j in na.omit(infec_p[[i]])) {
clear <- ifelse(age_haps_p[i, j] >= 90, rbinom(1, 1, 0.95),
ifelse(age_haps_p[i, j] >= 65, rbinom(1, 1, 0.85),
ifelse(age_haps_p[i, j] >= 30, rbinom(1, 1, pr_clear), 0)))
if(clear == 1) {
infec_p[[i]][which(infec_p[[i]] == j)] <- NA
age_haps_p[i, j] <- 0
}
}
}
}
################################
######## Personnel Movement ####
################################
# Reset: for individuals whose movement ended in the previous day, return to initial location
for(p in 1:sum(n_p)) {
if(last_day[p] == 1) {
human_locs[p] <- init_locs_p[p]
days_away[p] <- 0
length_trip[p] <- 0
}
}
humans_moving <- rep(0, sum(n_p))
for(i in 1:length(n_p)) {
idx <- which(human_locs == i & mobile_humans == 1 & (length_trip - days_away == 0))
if(length(idx) > 0)
humans_moving[idx] <- rbinom(length(idx), 1, pr_move[i])
}
length_trip[which(humans_moving == 1)] <- ceiling(rexp(length(which(humans_moving == 1)), 0.125))
days_away[which(days_away >= 1)] <- days_away[which(days_away >= 1)] + 1
days_away[which(humans_moving == 1)] <- 1
last_day <- rep(0, sum(n_p))
last_day[which(length_trip - days_away == 1 | length_trip == 1)] <- 1
# Process personnel movement: if an individual moves, update their location and record the event if they are infected.
for(i in 1:sum(n_p)) {
if(humans_moving[i] == 1) {
current_loc <- human_locs[i]
# Randomly select a new location excluding current one
new_loc <- sample((1:num_loc)[-current_loc], size = 1, prob = prob_matrix[current_loc, -current_loc])
# If the individual is infected (here we check via symptom index or old infection flag), record the movement event
if((r > 1) && (symp_index[i] == 1 || old_pers_infec[i] == 1)) {
movement_log <- rbind(movement_log, data.frame(
PersonID = i,
Origin = as.character(current_loc),
Destination = as.character(new_loc),
Day = r
))
}
human_locs[i] <- new_loc
}
}
location[, r, q] <- human_locs
################################
#### Mosquito Biting & Transmission
################################
mos_bite <- matrix(0, sum(n_m), sum(n_p))
which_mos_bite <- rep(0, sum(n_m))
which_hum_bite <- rep(0, sum(n_p))
person_bitten <- rep(0, sum(n_p))
bit_last_3_days[bit_last_3_days != 0] <- bit_last_3_days[bit_last_3_days != 0] + 1
bit_last_3_days[bit_last_3_days > 3] <- 0
mos_biting_probs <- rep(0, sum(n_m))
if(r %in% c(rainy_days, moderate_days)) {
mos_biting_probs[bit_last_3_days < 1 & age_m >= 2] <- rbinom(length(mos_biting_probs[bit_last_3_days < 1 & age_m >= 2]), 1, pr_on_feed_rainy)
} else {
mos_biting_probs[bit_last_3_days < 1 & age_m >= 2] <- rbinom(length(mos_biting_probs[bit_last_3_days < 1 & age_m >= 2]), 1, pr_on_feed_dry)
}
mos_biting_probs[bit_last_3_days >= 1 | age_m < 2] <- rbinom(length(mos_biting_probs[bit_last_3_days >= 1 | age_m < 2]), 1, pr_off_feed)
bites <- rbinom(sum(n_m), 1, mos_biting_probs)
which_mos_bite <- (bites == 1)
for(i in which(which_mos_bite)) {
num_biting <- sample(c(1,2,3,4,5,6,7), size = 1, prob = pr_num_biting)
which_people_bite <- sample(which(human_locs == init_locs_m[i]), size = num_biting, replace = F,
prob = suceptible_prob[which(human_locs == init_locs_m[i])])
person_bitten[which_people_bite] <- 1
mos_bite[i, which_people_bite] <- 1
which_hum_bite[which_people_bite] <- 1
}
bit_last_3_days[which_mos_bite == 1] <- 1
# Process interactions: For each bitten person, simulate transmission events
for(i in which(person_bitten == 1)) {
mos_index1 <- mos_bite[, i] == 1
mos_index <- which(mos_index1)
inf_bites <- rep(0, length(mos_index))
for(j in 1:length(mos_index)) {
# Human-to-mosquito transmission: if the human has old haplotypes (>=14 days) and meets conditions,
# then transfer haplotype(s) from human to mosquito.
old_haps_p_i <- which(age_haps_p[i, ] >= 14)
if(length(old_haps_p_i) > 0 && symp_age[i] < 1) {
transfer_haps <- rep(NA, length(old_haps_p_i))
for(k in 1:length(old_haps_p_i)) {
prob <- pr_hum_to_mos
transfer <- rbinom(1, 1, prob)
if(transfer == 1) {
transfer_haps[k] <- old_haps_p_i[k]
# If the human moved today, record the human-to-mosquito event
if(any(movement_log$PersonID == i & movement_log$Day == r)) {
origin_addr <- movement_log$Origin[movement_log$PersonID == i & movement_log$Day == r][1]
human_to_mos_log <- rbind(human_to_mos_log, data.frame(
PersonID = i,
MosquitoID = mos_index[j],
Location = as.character(human_locs[i]),  # New location
HaplotypeID = as.character(transfer_haps[k]),
Day = r
))
# If the mosquito has not been assigned an origin yet, assign the human's original address as its origin.
if(is.na(mosquito_origin[mos_index[j]])) {
mosquito_origin[mos_index[j]] <- origin_addr
}
}
}
}
new_haps <- setdiff(na.omit(transfer_haps), infec_m[[mos_index[j]]])
infec_m[[mos_index[j]]] <- c(infec_m[[mos_index[j]]], new_haps)
age_haps_m[mos_index[j], new_haps] <- 1
}
# Mosquito-to-human transmission: if the mosquito has old haplotypes (>=9 days) and the human is susceptible,
# then transfer haplotype(s) from mosquito to human.
old_haps_m_j <- which(age_haps_m[mos_index[j], ] >= 9)
if(length(old_haps_m_j) > 0 && symp_age[i] == 0) {
transfer_haps_m <- rep(NA, length(old_haps_m_j))
for(l in 1:length(old_haps_m_j)) {
prob_m <- pr_mos_to_hum
transfer_m <- rbinom(1, 1, prob_m)
if(transfer_m == 1) {
transfer_haps_m[l] <- old_haps_m_j[l]
}
}
new_haps_m <- setdiff(na.omit(transfer_haps_m), infec_p[[i]])
infec_p[[i]] <- c(infec_p[[i]], new_haps_m)
age_haps_p[i, new_haps_m] <- 1
if(length(new_haps_m) > 0) {
inf_bites[j] <- 1
# If the mosquito was infected from a mobile individual (mosquito_origin not NA), record the full transmission chain
if(!is.na(mosquito_origin[mos_index[j]])) {
trans_chain_log <- rbind(trans_chain_log, data.frame(
OriginAddress = as.character(mosquito_origin[mos_index[j]]),
TargetAddress = as.character(human_locs[i]),
TargetPersonID = i,
MosquitoID = mos_index[j],
HaplotypeID = as.character(new_haps_m[1]),
Day = r
))
}
}
}
}
if(r >= 365) {
num_infec_bites[i] <- num_infec_bites[i] + sum(inf_bites)
}
}  # End for each bitten person
# If today is a mosquito sampling day, process sampling (keep original logic)
if(r %in% mos_sample_days) {
sample_index <- sample(1:sum(n_m), size = 30)
mos_moi <- rep(NA, 30)
for(t in 1:30) {
mos_moi[t] <- length(na.omit(unlist(infec_m[[sample_index[t]]])))
}
mosquito_MOI_df[q, (1 + (30 * (r - 1))):(30 * r)] <- mos_moi
age_m[sample_index] <- 0
inf_m[sample_index] <- 0
moi_m[sample_index] <- 0
infec_m[sample_index] <- NA
bit_last_3_days[sample_index] <- 0
for(i in 1:sum(n_m)) {
if(i %in% sample_index) {
age_haps_m[i, ] <- 0
}
}
}
######################################################################################## newly added
## Diagnostic checks at end of day r:
# 1. **Human-to-Mosquito Transmission Checks**
# Verify each human→mosquito infection logged today meets haplotype age (≥14 days)
# and asymptomatic status conditions.
today_h2m <- human_to_mos_log[human_to_mos_log$Day == r, ]
if(nrow(today_h2m) > 0) {
for(idx in 1:nrow(today_h2m)) {
pid    <- today_h2m$PersonID[idx]
mid    <- today_h2m$MosquitoID[idx]
hap_id <- suppressWarnings(as.numeric(today_h2m$HaplotypeID[idx]))  # haplotype ID as numeric
# Check haplotype age in human and symptom status
if(!is.na(hap_id)) {
if(age_haps_p[pid, hap_id] < 14) {
diagnostic_log <- rbind(diagnostic_log, data.frame(
Day = r,
CheckType = "Human→Mosquito Transmission",
Description = paste("Haplotype", hap_id, "from Person", pid,
"transferred to Mosquito", mid,
"at age", age_haps_p[pid, hap_id],
"(< 14 days old)."),
IDs = paste("Person", pid, "Mosquito", mid)
))
}
}
if(symp_age[pid] > 0) {
diagnostic_log <- rbind(diagnostic_log, data.frame(
Day = r,
CheckType = "Human→Mosquito Transmission",
Description = paste("Person", pid, "was symptomatic during transmission to Mosquito", mid,
"(expected asymptomatic)."),
IDs = paste("Person", pid, "Mosquito", mid)
))
}
# Check movement log consistency for source person
mov <- movement_log[movement_log$PersonID == pid & movement_log$Day == r, ]
if(nrow(mov) == 0) {
diagnostic_log <- rbind(diagnostic_log, data.frame(
Day = r,
CheckType = "Movement Logging",
Description = paste("Person", pid, "infected Mosquito", mid,
"on day", r, "without a movement log entry (traveler not logged)."),
IDs = paste("Person", pid, "Mosquito", mid)
))
} else {
# Movement log exists – verify origin/destination vs transmission log
origin_loc <- mov$Origin[1]
dest_loc   <- mov$Destination[1]
if(dest_loc != today_h2m$Location[idx]) {
diagnostic_log <- rbind(diagnostic_log, data.frame(
Day = r,
CheckType = "Movement Logging",
Description = paste("Mismatch in travel destination for Person", pid, "on day", r, ": movement log destination", dest_loc,
"≠ transmission location", today_h2m$Location[idx], "."),
IDs = paste("Person", pid, "Mosquito", mid)
))
}
# Verify mosquito_origin assignment
if(is.na(mosquito_origin[mid])) {
diagnostic_log <- rbind(diagnostic_log, data.frame(
Day = r,
CheckType = "Mosquito Origin",
Description = paste("Mosquito", mid, "infected by Person", pid, "from origin", origin_loc,
"but mosquito_origin was not set."),
IDs = paste("Mosquito", mid, "Person", pid)
))
} else if(mosquito_origin[mid] != origin_loc) {
diagnostic_log <- rbind(diagnostic_log, data.frame(
Day = r,
CheckType = "Mosquito Origin",
Description = paste("Mosquito", mid, "has origin", mosquito_origin[mid],
"but was infected by Person", pid, "from origin", origin_loc, "(inconsistent source)."),
IDs = paste("Mosquito", mid, "Person", pid)
))
}
}
}
}
# 2. **Mosquito-to-Human Transmission Checks**
# Verify each mosquito→human infection logged today meets haplotype age (≥9 days)
# and host susceptibility (not symptomatic) conditions.
today_chain <- trans_chain_log[trans_chain_log$Day == r, ]
if(nrow(today_chain) > 0) {
for(idx in 1:nrow(today_chain)) {
mid       <- today_chain$MosquitoID[idx]
tgt_pid   <- today_chain$TargetPersonID[idx]
hap_id    <- suppressWarnings(as.numeric(today_chain$HaplotypeID[idx]))
originAdr <- today_chain$OriginAddress[idx]
targetAdr <- today_chain$TargetAddress[idx]
# Check mosquito haplotype age
if(!is.na(hap_id) && age_haps_m[mid, hap_id] < 9) {
diagnostic_log <- rbind(diagnostic_log, data.frame(
Day = r,
CheckType = "Mosquito→Human Transmission",
Description = paste("Mosquito", mid, "transmitted haplotype", hap_id,
"to Person", tgt_pid, "at age", age_haps_m[mid, hap_id],
"(< 9 days old in mosquito)."),
IDs = paste("Mosquito", mid, "Person", tgt_pid)
))
}
# Check that target person was not symptomatic (expected susceptible/asymptomatic)
if(symp_age[tgt_pid] > 0) {
diagnostic_log <- rbind(diagnostic_log, data.frame(
Day = r,
CheckType = "Mosquito→Human Transmission",
Description = paste("Person", tgt_pid, "was symptomatic while receiving infection from Mosquito", mid,
"(expected non-symptomatic recipient)."),
IDs = paste("Mosquito", mid, "Person", tgt_pid)
))
}
# Check source-recipient log consistency
if(is.na(mosquito_origin[mid]) || as.character(mosquito_origin[mid]) != as.character(originAdr)) {
diagnostic_log <- rbind(diagnostic_log, data.frame(
Day = r,
CheckType = "Transmission Chain",
Description = paste("Mosquito", mid, "origin in chain log (", originAdr,
") does not match stored mosquito_origin (", mosquito_origin[mid], ")."),
IDs = paste("Mosquito", mid, "Person", tgt_pid)
))
}
if(as.character(targetAdr) != as.character(init_locs_m[mid])) {
diagnostic_log <- rbind(diagnostic_log, data.frame(
Day = r,
CheckType = "Transmission Chain",
Description = paste("Target address in chain log (", targetAdr, ") for Mosquito", mid,
"≠ mosquito's location (", init_locs_m[mid], ")."),
IDs = paste("Mosquito", mid, "Person", tgt_pid)
))
}
# Confirm that transmitted haplotype now exists in the target person's infection
if(!is.na(hap_id) && !(hap_id %in% infec_p[[tgt_pid]])) {
diagnostic_log <- rbind(diagnostic_log, data.frame(
Day = r,
CheckType = "Transmission Chain",
Description = paste("Haplotype", hap_id, "recorded in transmission to Person", tgt_pid,
"is not found in that person's infection record."),
IDs = paste("Mosquito", mid, "Person", tgt_pid)
))
}
}
}
# 3. **Movement and Traveler Checks**
# Ensure traveler destinations and logging match expectations.
# (a) Infected travelers should be logged; if not, record anomaly.
if(r == 1) {
# On day 1, movement logging is skipped in original code. Flag infected movers on day 1.
moved_ids <- which(humans_moving == 1)
for(p in moved_ids) {
if(old_pers_infec[p] == 1 || symp_index[p] == 1) {
if(nrow(movement_log[movement_log$PersonID == p & movement_log$Day == 1, ]) == 0) {
diagnostic_log <- rbind(diagnostic_log, data.frame(
Day = r,
CheckType = "Movement",
Description = paste("Infected Person", p, "traveled on Day 1 but the move was not logged."),
IDs = paste("Person", p)
))
}
}
}
}
# (b) Validate each movement log entry of today: location updates should match.
today_moves <- movement_log[movement_log$Day == r, ]
if(nrow(today_moves) > 0) {
for(idx in 1:nrow(today_moves)) {
pid <- today_moves$PersonID[idx]
orig<- today_moves$Origin[idx]; dest <- today_moves$Destination[idx]
# Check that the person's current location matches the logged destination
if(as.character(dest) != as.character(human_locs[pid])) {
diagnostic_log <- rbind(diagnostic_log, data.frame(
Day = r,
CheckType = "Movement",
Description = paste("Person", pid, "destination mismatch on day", r,
"- recorded destination", dest, "but current location is", human_locs[pid], "."),
IDs = paste("Person", pid)
))
}
# Check that origin in log matches person's home (expected starting point of trip)
if(as.character(orig) != as.character(init_locs_p[pid])) {
diagnostic_log <- rbind(diagnostic_log, data.frame(
Day = r,
CheckType = "Movement",
Description = paste("Person", pid, "origin mismatch on day", r,
"- logged origin", orig, "≠ home location", init_locs_p[pid], "."),
IDs = paste("Person", pid)
))
}
}
}
# 4. **Multiple Infection Source (Mosquito)**
# If a mosquito was infected by more than one distinct person (different origins), flag inconsistency.
# (Check across all human_to_mosquito events up to today for this mosquito.)
if(nrow(today_h2m) > 0) {
inf_mos <- unique(today_h2m$MosquitoID)
for(m in inf_mos) {
events <- human_to_mos_log[human_to_mos_log$MosquitoID == m, ]
if(nrow(events) > 1) {
# Gather distinct origin locations of all source persons for mosquito m
origins <- c()
for(e in 1:nrow(events)) {
src_p <- events$PersonID[e]
# Find that person's origin (from movement_log) for the infection event day
mov_e <- movement_log[movement_log$PersonID == src_p & movement_log$Day == events$Day[e], ]
if(nrow(mov_e) > 0) origins <- c(origins, mov_e$Origin[1])
}
origins <- unique(origins)
if(length(origins) > 1) {
diagnostic_log <- rbind(diagnostic_log, data.frame(
Day = r,
CheckType = "Mosquito Origin",
Description = paste("Mosquito", m, "infected by multiple sources from different origins:",
paste(origins, collapse = ","), "- single origin expected."),
IDs = paste("Mosquito", m)
))
}
}
}
}
######################################################################################## newly added
# Store daily human haplotype ages
age_human_haps_array[, ((1 + (length(haps) * (r - 1))):(length(haps) * r)), q] <- age_haps_p
}  # End of daily loop
eir_df[q, ] <- num_infec_bites
age_mos_df[q, ] <- age_m
sim_end_time <- Sys.time()
time_per_sim[q] <- as.numeric(difftime(sim_end_time, sim_start_time, units = "hours"))
print(paste("Time taken for simulation", q, ":", time_per_sim[q], "hours"))
######################################################################################## newly added
# Tag and collect diagnostic entries for this simulation
if(nrow(diagnostic_log) > 0) diagnostic_log$Simulation <- q
global_diagnostic_log <- rbind(global_diagnostic_log, diagnostic_log)
######################################################################################## newly added
## Add simulation-specific tracking logs with simulation number, and accumulate to global logs
movement_log$Simulation <- q
human_to_mos_log$Simulation <- q
trans_chain_log$Simulation <- q
global_movement_log <- rbind(global_movement_log, movement_log)
global_human_to_mos_log <- rbind(global_human_to_mos_log, human_to_mos_log)
global_trans_chain_log <- rbind(global_trans_chain_log, trans_chain_log)
}  # End for each simulation replicate
total_end_time <- Sys.time()
total_duration <- as.numeric(difftime(total_end_time, total_start_time, units = "hours"))
print(paste("Total time taken for all simulations:", total_duration, "hours"))
folder_path <- scenario_name
if (!file.exists(folder_path)) {
dir.create(folder_path)
cat("Folder created:", folder_path, "\n")
} else {
cat("Folder already exists:", folder_path, "\n")
}
saveRDS(mosquito_MOI_df, file = file.path(folder_path, paste0("mosquito_MOI_", scenario_name)))
saveRDS(eir_df, file = file.path(folder_path, paste0("eir_", scenario_name)))
saveRDS(age_mos_df, file = file.path(folder_path, paste0("mos_age_", scenario_name)))
saveRDS(symptoms, file = file.path(folder_path, paste0("symptom_status_", scenario_name)))
saveRDS(age_human_haps_array, file = file.path(folder_path, paste0("haplotype_age_", scenario_name)))
saveRDS(location, file = file.path(folder_path, paste0("location_", scenario_name)))
saveRDS(initial_locs_matrix, file = file.path(folder_path, paste0("initial_locs_", scenario_name)))
# Write timing log to CSV file
timing_log <- data.frame(
Simulation = 1:n_sim,
TimeTaken = time_per_sim
)
timing_log <- rbind(timing_log, data.frame(Simulation = "Total", TimeTaken = total_duration))
write.csv(timing_log, file = file.path(folder_path, "timing_log.csv"), row.names = FALSE)
# Write global tracking logs to CSV files
write.csv(global_movement_log, file = file.path(folder_path, paste0("movement_log_", scenario_name, ".csv")), row.names = FALSE)
write.csv(global_human_to_mos_log, file = file.path(folder_path, paste0("human_to_mos_log_", scenario_name, ".csv")), row.names = FALSE)
write.csv(global_trans_chain_log, file = file.path(folder_path, paste0("transmission_chain_log_", scenario_name, ".csv")), row.names = FALSE)
write.csv(global_diagnostic_log, file = file.path(folder_path, paste0("diagnostic_log_", scenario_name, ".csv")), row.names = FALSE)
## Create an origin-destination (OD) matrix based on the global_trans_chain_log
# Rows: Origin; Columns: Destination; Diagonals set to 0.
od_matrix <- matrix(0, nrow = num_loc, ncol = num_loc)
rownames(od_matrix) <- as.character(1:num_loc)
colnames(od_matrix) <- as.character(1:num_loc)
if(nrow(global_trans_chain_log) > 0) {
for(i in 1:nrow(global_trans_chain_log)) {
origin <- as.character(global_trans_chain_log$OriginAddress[i])
destination <- as.character(global_trans_chain_log$TargetAddress[i])
if(origin != destination) {  # Ignore self-transmission
od_matrix[origin, destination] <- od_matrix[origin, destination] + 1
}
}
}
# Write OD matrix to CSV file
write.csv(od_matrix, file = file.path(folder_path, paste0("OD_matrix_", scenario_name, ".csv")), row.names = TRUE)
print(scenario_name)
print(q)
}
generate_mobility_matrix <- function(n_cities = 2) {
n_towns = num_loc - n_cities
prob_matrix <- matrix(NA, nrow = num_loc, ncol = num_loc)
for (i in 1:num_loc) {
for (j in 1:num_loc) {
if (i != j) {
# Determine probabilities based on city/town relationships
if (i <= n_cities && j <= n_cities) {
prob_matrix[i, j] <- 0.2 # City-to-city
} else if (i > n_cities && j <= n_cities) {
prob_matrix[i, j] <- 0.45  # Town-to-city
} else if (i > n_cities && j > n_cities) {
prob_matrix[i, j] <- 0.05 # Town-to-town
} else {
prob_matrix[i, j] <- 0.1 # City-to-town
}
}
}
}
return(prob_matrix)
}
prob_matrix <- generate_mobility_matrix()
run_biting_sim(pr_symp_infec = 0.05, pr_symp_non_infec = 0.05, pr_clear = 0.85,
pr_off_feed = 0.01, pr_on_feed_rainy = 0.135,
pr_on_feed_dry = 0.05*0.135/0.15, pr_on_feed_moderate = 0.1*0.135/0.15,
pr_hum_to_mos = 0.6, pr_mos_to_hum = 0.3,
pr_num_biting = c(0.6, 0.34, 0.03, 0.003, 0, 0, 0),
n_m=n_m, proportion_suceptible = 0.2, pr_suceptibility=0.01,
pr_nonSuceptibility=0.005, n_p= n_p, proportion_mobile = 0.1,
pr_move = c(rep(0.03, 2), rep(0.06, 4)), num_loc=num_loc,
n_days = 730, scenario_name = "Test_uneven",
n_sim=3, prob_matrix=prob_matrix, seed = 20250501)
getwd()
